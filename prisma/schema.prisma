generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Tutor {
    id           Int      @id @default(autoincrement())
    name         String
    citizenship  String
    dob          DateTime
    gender       String
    race         String
    postalCode   String
    email        String
    locations    String[]
    education    String
    category     String
    school       String
    gradYear     Int
    photo        String?
    availability String[]
    introduction String
    display      Boolean

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    subjectsByLevel SubjectsByLevel[]
    Booking         Booking[]

    @@index([name])
}

model SubjectsByLevel {
    id      String   @id @default(cuid())
    tutorId Int
    level   String
    names   String[]
    rate    Float

    tutor Tutor @relation(fields: [tutorId], references: [id], onDelete: Cascade)
}

model Booking {
    id                  Int       @id @default(autoincrement())
    tutorId             Int
    studentId           String
    subject             String
    level               String
    rate                Float
    date                DateTime
    time                String
    duration            Int
    location            String
    status              String
    review              String?
    rating              Int?
    reviewByTutor       String?
    reviewByStudent     String?
    reviewDate          DateTime?
    reviewByTutorDate   DateTime?
    reviewByStudentDate DateTime?

    tutor   Tutor @relation(fields: [tutorId], references: [id], onDelete: Cascade)
    student User  @relation(fields: [studentId], references: [id], onDelete: Cascade)

    @@index([tutorId])
    @@index([studentId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          String    @default("USER")
    accounts      Account[]
    sessions      Session[]
    Booking       Booking[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
